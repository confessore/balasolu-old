@page "/account"
@attribute [Authorize]
@inject NavigationManager _navigationManager
@inject UserManager<User> _userManager
@inject IHttpContextAccessor _httpContextAccessor

<div class="container-fluid">
    <div class="d-flex flex-row flex-wrap justify-content-center align-content-center">
    <AuthorizeView>
        <Authorized>
            @if (model.Initialized)
            {
                <PlatformSelectionCard UserId="@model.UserId" />
                <PostCard UserId="@model.UserId" />
            }
        </Authorized>
        <NotAuthorized>
            gg
        </NotAuthorized>
    </AuthorizeView>
    </div>
</div>

@code {
    AccountModel model = new AccountModel();

    class AccountModel
    {
        public string? UserId { get; set; }
        public bool Initialized { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!_httpContextAccessor.HttpContext!.User.Claims.Any())
        {
            _navigationManager.NavigateTo("/login");
            return;
        }
        var user = await _userManager.GetUserAsync(_httpContextAccessor?.HttpContext?.User);
        model.UserId = user.Id;
        model.Initialized = true;
    }
}
